#include <moveit/move_group_interface/move_group.h>
#include <moveit/planning_scene_interface/planning_scene_interface.h>

#include <moveit_msgs/DisplayRobotState.h>
#include <moveit_msgs/DisplayTrajectory.h>

#include <moveit_msgs/AttachedCollisionObject.h>
#include <moveit_msgs/CollisionObject.h>

int main(int argc, char **argv)
{
  ros::init(argc, argv, "move_group_interface_tutorial");
  ros::NodeHandle node_handle;  
  ros::AsyncSpinner spinner(1);
  spinner.start();


  /* This sleep is ONLY to allow Rviz to come up */
  sleep(5);
  

  moveit::planning_interface::MoveGroup group("sia5");

  moveit::planning_interface::PlanningSceneInterface planning_scene_interface;  

  ros::Publisher display_publisher = node_handle.advertise<moveit_msgs::DisplayTrajectory>("/move_group/display_planned_path", 1, true);
  moveit_msgs::DisplayTrajectory display_trajectory;

  ROS_INFO("Reference frame: %s", group.getPlanningFrame().c_str());
  
  ROS_INFO("Reference frame: %s", group.getEndEffectorLink().c_str());

 // Cartesian Paths
moveit::planning_interface::MoveGroup::Plan plan;
  
  std::vector<geometry_msgs::Pose> waypoints;

  geometry_msgs::Pose target_pose3 = group.getCurrentPose().pose;
  target_pose3.position.x -= 0.2;
  waypoints.push_back(target_pose3);  //out

  target_pose3.position.z -= 0.25;
  waypoints.push_back(target_pose3);  //up

  target_pose3.position.z += 0.25;
target_pose3.position.x += 0.2;
waypoints.push_back(target_pose3);  //back to start

  moveit_msgs::RobotTrajectory trajectory;
  double fraction = group.computeCartesianPath(waypoints,
                                               0.01,  // eef_step
                                               0.0,   // jump_threshold
                                               trajectory);

  ROS_INFO("Visualizing plan 4 (cartesian path) (%.2f%% acheived)",
        fraction * 100.0);    
  /* Sleep to give Rviz time to visualize the plan. */
  sleep(15.0);

  plan.trajectory_ = trajectory;

 
  group.execute(plan); 


  ros::shutdown();  
  return 0;
}
